plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.1'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'maven-publish'
}

compileJava {
    options.encoding = "UTF-8"
}

group = 'ru.snowreplicator.order_approving'
version = '0.0.1'
// get artefact version from version.json file
import groovy.json.JsonSlurper

def versionJsonFile = new File("$rootDir/version.json")
if (versionJsonFile.exists()) {
    def versionJsonObject = new JsonSlurper().parse(versionJsonFile)
    if (versionJsonObject != null &&
            versionJsonObject.containsKey('major') &&
            versionJsonObject.containsKey('minor') &&
            versionJsonObject.containsKey('patch')) {
        version = "${versionJsonObject.major}.${versionJsonObject.minor}.${versionJsonObject.patch}"
        if (versionJsonObject.containsKey('revision') && versionJsonObject.revision != null)
            version = "${version}.${versionJsonObject.revision}"
    }
}

tasks.named('jar') {
    enabled = false
}

tasks.register('copyVersionFile') {
    doLast {
        def sourceFile = file("${projectDir}/version.json")
        if (!sourceFile.exists()) {
            throw new GradleException("version.json not found in root!")
        }
        def destinationDir = file("${projectDir}/src/main/resources")
        copy {
            from sourceFile
            into destinationDir
        }
        println "File version.json success copy to ${destinationDir}"
    }
}


java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.5.0'
    implementation 'org.liquibase:liquibase-core'
    implementation 'commons-io:commons-io:2.17.0'
    implementation 'net.lbruun.springboot:preliquibase-spring-boot-starter:1.5.0'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.projectlombok:lombok'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
    useJUnitPlatform()
}

// add pom.xml into jar file
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
}
bootJar {
    dependsOn copyVersionFile
    mustRunAfter copyVersionFile
    into("META-INF/maven/$project.group/$project.name") {
        from { generatePomFileForMavenJavaPublication }
        rename ".*", "pom.xml"
    }
    archiveFileName = 'app.jar'
}

// for getting version
springBoot {
    buildInfo()
}
